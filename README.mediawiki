== fastlocate ==
fast locate a file or directory using locate command in linux.

The script can get the results according given keywords using locate command. When there is only one result, it will output only one path match the keywords. While reading a input when there are many results.

Combine the script and bash, we can do a lot of fast moves.

=== usage ===
<pre>
usage: fastlocate.py [-h] (-d | -f | -l LIMIT) keywords [keywords ...]

locate the file using locate command in linux.

positional arguments:
  keywords              keywords

optional arguments:
  -h, --help            show this help message and exit
  -d, --dir             to find directory.
  -f, --file            to find file.
  -l LIMIT, --limit LIMIT
                        the maximum number of the results.
</pre>

=== Example ===
Search the directory whose base name is "test" and also whose path contains "Dropbox":
<pre>fastlocate.py -d test Dropbox</pre>

Because there is only one result. So it outputs:
<pre>/home/klniu/Dropbox/code/go/test</pre>

Search the directory whose base name is "ldar" and also whose path contains "Dropbox":
<pre>fastlocate.py -d ldar Dropbox</pre>

Because there are many results. So it outputs a menu for you to select the right item:
<pre>
1) /home/klniu/Dropbox/code/python/ldar
2) /home/klniu/Dropbox/code/python/ldar/system/ldar
3) /home/klniu/Dropbox/documents/ldar
Please select the directory(default=1, "q" for quit):
</pre>
input a integer and the script will output the right path. Press enter to select the first result, or "q" to quit.

=== Awesome ===
Combile the script and bash, we can move around fast:

put the fastlocate.py in some place, such as ~/bin, and:
<pre>chmod +x ~/bin/fastlocate.py</pre>

put the following functions into ~/.bashrc, we can do a lot of thing:
<pre>
# cd around 
function lcd(){
    result=`~/bin/fastlocate.py -d $@|tee /dev/stderr`
    if [[ ! -z $result ]]; then
        cd $result
    fi
}

# vim a file around
function lvim(){
    result=`~/bin/fastlocate.py -f $@|tee /dev/stderr`
    if [[ ! -z $result ]]; then
        vim -p -g --servername GVIM --remote-tab-silent $result
    fi
}

# krusader a file around
function lfm(){
    result=`~/bin/fastlocate.py -d $@|tee /dev/stderr`
    if [[ ! -z $result ]]; then
        krusader $result
    fi
}
</pre>

In terminal, input:
<pre>lvim .bashrc /home</pre>
to edit .bashrc

<pre>lcd Dropbox</pre>
to change directory to Dropbox


<pre>lfm test /home</pre>
to open the test directory which locates in /home in krusader.

You can create your own functions to extend the script.
